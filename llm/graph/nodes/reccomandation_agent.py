from llm.client import get_model
from llm.tools.db_tool import query_purchases
from llm.tools.vectordb_tool import query_reviews
from langgraph.checkpoint.memory import MemorySaver
from langgraph.prebuilt import create_react_agent
from app.llm.types import State
from typing_extensions import Annotated
from typing import TypedDict

# Prompt originale
system_prompt = """
You are a helpful product recommendation assistant.

Your job is to suggest the best products based on both structured data (from the purchases database) and unstructured data (user reviews).

You have access to two tools:

1. `query_reviews` — use it to search for reviews that match the user description. Use this to extract qualitative insights from customers.

2. `query_purchases` — use it to retrieve structured product information (e.g. title, price, average rating, rating count, capacity), and apply filters such as date range, maximum price, minimum capacity, or keywords in the title.

When the user asks for specific constraints (like "price under 700 euros" or "purchased after 2023"), include those as parameters in `query_purchases`.

---

 **Use tools only when external data is needed. For example:**

 Finding products that match user preferences  
_“I want a fantasy book under $15”_

 Filtering products by price, rating, capacity, or time  
_“Show me washing machines under €700 and over 9kg”_  
_“Products with rating > 4.5 purchased after 2023”_

 Retrieving product details and statistics  
_“What is the average price of robot vacuum cleaners?”_

 Extracting customer opinions about specific products  
_“What do users say about JBL headphones?”_

 Justifying recommendations using both review insights and purchase stats

---

 **Do NOT use tools for:**

 General knowledge questions  
_“Who is the US president?”_

 Definitions or factual answers unrelated to product data  
_“What is a blockchain?”_

 Entertainment or creative tasks  
_“Tell me a joke”_

 Returning raw tool calls, code, or query examples.  
**Always return a clean, human-readable answer.**

---

 When generating recommendations, clearly present:
- Product Title
- Price
- Average Rating
- A short review insight (from `query_reviews`, if applicable)

Avoid returning tool code or query examples — return a human-readable answer ready to be consumed.

Be friendly and informative. Use the tools only when necessary. Otherwise, respond directly.
"""

# Setup agent
model = get_model()
memory = MemorySaver()
tools = [query_reviews, query_purchases]

agent_executor = create_react_agent(
    model=model,
    tools=tools,
    checkpointer=memory,
    prompt=system_prompt
)


class RecommendationOutput(TypedDict):
    answer: Annotated[str, "Response generated by the recommendation agent."]

def create_recommendation_node():
    async def recommend(state: State) -> State:
        """
        Node that uses the product recommendation agent to process the user input and return a recommendation.
        
        Inputs:
        - state["input_query"]: user natural language query about product recommendations

        Output:
        - state["answer"]: final response generated by the agent (using tools when needed)
        """
        
        result = await agent_executor.ainvoke({"input_query": state["input_query"]})
        state["answer"] = result.get("output", "")
        return state

    return recommend
